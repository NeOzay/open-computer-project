--#!/bin/lua
local options = install

local fs = require"filesystem"
local term = require("term")
local shell = require("shell")
local computer = require("computer")

local program_list = {}
for f in fs.list(options.from) do
  if (f):sub(-1, -1) == "/" then
    table.insert(program_list, (f):sub(1, -2))
  end
end
for index, p_name in ipairs(program_list) do
  term.write(("%-2d)   %s\n"):format(index, p_name), true)
end

term.write("choise program: ")
local selected = tonumber(term.read())

term.write("\n")
options.from = options.from .. program_list[selected]

options.cp_args =
{
  "-vrx" .. (options.update and "ui" or ""),
  "--skip=.prop",
  fs.concat(options.from, options.fromDir) .. "/.",
  fs.concat(options.to  , options.root)
}

local cp, reason = loadfile(shell.resolve("cp", "lua"), "bt", _G)
assert(cp, reason)

local ok, ec = pcall(cp, table.unpack(options.cp_args))
assert(ok, ec)

if ec ~= nil and ec ~= 0 then
  return ec
end

print("Installation complete!")

if options.setlabel then
  pcall(options.target.dev.setLabel, options.label)
end

if options.setboot then
  local address = options.target.dev.address
  if computer.setBootAddress(address) then
    print("Boot address set to " .. address)
  end
end

if options.reboot then
  io.write("Reboot now? [Y/n] ")
  if ((io.read() or "n").."y"):match("^%s*[Yy]") then
    print("\nRebooting now!\n")
    computer.shutdown(true)
  end
end

print("Returning to shell.\n")

