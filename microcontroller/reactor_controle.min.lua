local a=10;local b=2;local c=3;local d={"tile.appliedenergistics2.BlockInterface","tile.chest"}local e=component or require("component")local f=computer or require("computer")local g={down=0,up=1,north=2,south=3,west=4,east=5}local h;if e.list("transposer")()then h=e.proxy(e.list("transposer")())end;if not h then error("No transposer found")end;local i;if e.list("redstone")()then i=e.proxy(e.list("redstone")())end;if not i then error("No redstone card found")end;local function e(a)for b,b in pairs(g)do if h.getInventoryName(b)==a then return b end end end;local g;for a,a in ipairs(d)do g=e(a)if g then break end end;if not g then error("No chest found")end;local d=e("blockReactorChamber")or e("blockGenerator")if not d then error("No reactor found")end;local e=e("gt.blockmachines")if not e then error("No battery found")end;local j={}local k={}local function l()local a=h.getInventorySize(d)for a=1,a do local b=h.getStackInSlot(d,a)if b and b.label:find("Fuel Rod")then j[a]=b.name end;if b and b.label:find("Heat Vent")then k[a]=b.label end end end;local m={}local function n(a,b)if m[a]then local c=h.getStackInSlot(g,m[a])if c and c.name==a and not b then return m[a]else m[a]=nil end end;local c=h.getInventorySize(g)for b=b or 1,c do local c=h.getStackInSlot(g,b)if c and c.name==a then m[a]=b;return b end end end;local function m(a,b)local b=n(a,b)if b then local c=h.getStackInSlot(g,b)if c and c.size==c.maxSize then return m(a,b+1)end;return b end end;local function o()for a,b in pairs(j)do local c=h.getStackInSlot(d,a)if not c or c.name~=b then local b=n(b)local e;if c then e=m(c.name)end;if b then if e then h.transferItem(d,g,1,a,e)else h.transferItem(d,g,1,a)end;h.transferItem(g,d,1,b,a)end end end end;local g;local function j(a)for a=1,a or 1 do local a=next(k,g)or next(k)if not a then error("no vent in reactor")end;local b=h.getStackInSlot(d,a)if b then if b.damage/b.maxDamage>0.3 then i.setOutput({[0]=0,[1]=0,[2]=0,[3]=0,[4]=0,[5]=0})error(k[a].." overheating at slot: "..a)end else error(k[a].." missing at slot: "..a)end;g=a end end;local d=false;local function g()local a=h.getAllStacks(e)if not a then return"high"end;local b=false;for a in a do if a.charge and a.maxCharge then b=true;if a.charge/a.maxCharge<0.2 then return"low"end;if a.charge/a.maxCharge>0.8 then return"high"end end end;if not b then return"high"end end;local function e()l()local e=nil;while true do j(b)if a<0 then o()a=1 end;e=g()if e=="low"and not d then i.setOutput({[0]=15,[1]=15,[2]=15,[3]=15,[4]=15,[5]=15})d=true elseif e=="high"and d then i.setOutput({[0]=0,[1]=0,[2]=0,[3]=0,[4]=0,[5]=0})d=false end;a=a-1;f.pullSignal(c)end end;e()